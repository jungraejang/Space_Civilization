{"ast":null,"code":"import _classCallCheck from \"/Users/jungrae/Desktop/Assignments/react_events/react_assignment/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jungrae/Desktop/Assignments/react_events/react_assignment/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jungrae/Desktop/Assignments/react_events/react_assignment/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jungrae/Desktop/Assignments/react_events/react_assignment/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jungrae/Desktop/Assignments/react_events/react_assignment/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jungrae/Desktop/Assignments/react_events/react_assignment/src/Clicker.js\";\n\nvar React = require(\"react\");\n\nvar Clicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Clicker, _React$Component);\n\n  function Clicker() {\n    var _this;\n\n    _classCallCheck(this, Clicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clicker).call(this));\n\n    _this.handleClicker = function () {\n      _this.setState({\n        points: _this.state.points + _this.state.rate\n      });\n    };\n\n    _this.buyAgricultureDome = function () {\n      var cost = 200;\n\n      if (_this.state.points >= cost + _this.state.numberOfAgricultureDome * 10) {\n        _this.setState({\n          points: _this.state.points - (cost + _this.state.numberOfAgricultureDome * 10),\n          rate: _this.state.rate + 3,\n          numberOfMines: _this.state.numberOfAgricultureDome += 1,\n          population: _this.state.population += 100\n        });\n      } else {\n        _this.setState({\n          message: \"Not enough Credit. Need \" + \"$\" + (cost - _this.state.points)\n        });\n      }\n    };\n\n    _this.buyWaterPlant = function () {\n      var cost = 200;\n\n      if (_this.state.points >= cost + _this.state.numberOfWaterPlant * 10) {\n        _this.setState({\n          points: _this.state.points - (cost + _this.state.numberOfWaterPlant * 10),\n          rate: _this.state.rate + 3,\n          numberOfMines: _this.state.numberOfWaterPlant += 1,\n          population: _this.state.population += cost\n        });\n      } else {\n        _this.setState({\n          message: \"Not enough Credit. Need \" + \"$\" + (cost - _this.state.points)\n        });\n      }\n    };\n\n    _this.buyGasProcessing = function () {\n      var cost = 200;\n\n      if (_this.state.points >= 100 + _this.state.numberOfGasProcessing * 10) {\n        _this.setState({\n          points: _this.state.points - (100 + _this.state.numberOfGasProcessing * 10),\n          rate: _this.state.rate + 3,\n          numberOfMines: _this.state.numberOfGasProcessing += 1\n        });\n      } else {\n        _this.setState({\n          message: \"Not enough Credit. Need \" + \"$\" + (cost - _this.state.points)\n        });\n      }\n    };\n\n    _this.buyOreMine = function () {\n      var cost = 100;\n\n      if (_this.state.points >= 100 + _this.state.numberOfMines * 10) {\n        _this.setState({\n          points: _this.state.points - (100 + _this.state.numberOfMines * 10),\n          rate: _this.state.rate + 3,\n          numberOfMines: _this.state.numberOfMines += 1\n        });\n      } else {\n        _this.setState({\n          message: \"Not enough Credit. Need \" + \"$\" + (cost - _this.state.points)\n        });\n      }\n    };\n\n    _this.autoAccumulate = function () {\n      setInterval(function () {\n        _this.setState({\n          rate: _this.state.rate,\n          points: _this.state.points + _this.state.rate,\n          populationGrowth: Math.floor(_this.state.population * 0.01),\n          population: _this.state.population + _this.state.populationGrowth\n        });\n      }, 1000);\n    };\n\n    _this.state = {\n      points: 70,\n      population: 100,\n      populationGrowth: 0,\n      rate: 1,\n      message: \"\",\n      numberOfMines: 0,\n      numberOfGasProcessing: 0,\n      numberOfAgricultureDome: 0,\n      numberOfWaterPlant: 0\n    };\n    return _this;\n  }\n\n  _createClass(Clicker, [{\n    key: \"render\",\n    // populationIncrease = () => {\n    //   setInterval(() => {\n    //     this.setState({\n    //       populationGrowth: Math.floor(this.state.population * 0.01)\n    //     });\n    //   }, 1000);\n    // };\n    value: function render() {\n      var points = this.state.points;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"JRJ\\\\'s Galaxy and Beyond\"), React.createElement(\"button\", {\n        onClick: this.autoAccumulate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"START\"), React.createElement(\"button\", {\n        onClick: this.handleClicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Click Here\"), React.createElement(\"button\", {\n        onClick: this.buyOreMine,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"'Buy an Ore Mine($100)'\"), React.createElement(\"button\", {\n        onClick: this.buyGasProcessing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"'Buy a Gas Processing Facility($100)'\"), React.createElement(\"button\", {\n        onClick: this.buyAgricultureDome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"'Buy an Agriculture Dome($200)'\"), React.createElement(\"button\", {\n        onClick: this.buyWaterPlant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"'Buy a Water Processing Plant'\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Credit Per Second \\uD83D\\uDCB5: \", this.state.rate), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Population Growth Per Second \\uD83E\\uDD31: \", this.state.populationGrowth), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Ore Mines in Operation \\uD83D\\uDDFB: \", this.state.numberOfMines), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Gas Processing Facilities in Operation \\uD83C\\uDF0B:\", \" \", this.state.numberOfGasProcessing), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Agricultural Domes in Operation \\uD83E\\uDD6C: \", this.state.numberOfAgricultureDome), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Water Processing Plants in Operation \\uD83D\\uDCA7: \", this.state.numberOfWaterPlant), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Galactic Credit Accumulated \\uD83D\\uDCB0: $\", points), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Total Population \\uD83D\\uDC68\\u200D\\uD83D\\uDE80: \", this.state.population));\n    }\n  }]);\n\n  return Clicker;\n}(React.Component);\n\nexport default Clicker;","map":{"version":3,"sources":["/Users/jungrae/Desktop/Assignments/react_events/react_assignment/src/Clicker.js"],"names":["React","require","Clicker","handleClicker","setState","points","state","rate","buyAgricultureDome","cost","numberOfAgricultureDome","numberOfMines","population","message","buyWaterPlant","numberOfWaterPlant","buyGasProcessing","numberOfGasProcessing","buyOreMine","autoAccumulate","setInterval","populationGrowth","Math","floor","Component"],"mappings":"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","sourcesContent":["const React = require(\"react\");\n\nclass Clicker extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      points: 70,\n      population: 100,\n      populationGrowth: 0,\n      rate: 1,\n      message: \"\",\n      numberOfMines: 0,\n      numberOfGasProcessing: 0,\n      numberOfAgricultureDome: 0,\n      numberOfWaterPlant: 0\n    };\n  }\n\n  handleClicker = () => {\n    this.setState({\n      points: this.state.points + this.state.rate\n    });\n  };\n\n  buyAgricultureDome = () => {\n    let cost = 200\n    if (this.state.points >= cost + this.state.numberOfAgricultureDome * 10) {\n      this.setState({\n        points:\n          this.state.points - (cost + this.state.numberOfAgricultureDome * 10),\n        rate: this.state.rate + 3,\n        numberOfMines: (this.state.numberOfAgricultureDome += 1),\n        population: (this.state.population += 100)\n      });\n    } else {\n      this.setState({\n        message: \"Not enough Credit. Need \" + \"$\" + (cost - this.state.points)\n      });\n    }\n  };\n\n  buyWaterPlant = () => {\n    let cost = 200\n    if (this.state.points >= cost + this.state.numberOfWaterPlant * 10) {\n      this.setState({\n        points:\n          this.state.points - (cost + this.state.numberOfWaterPlant * 10),\n        rate: this.state.rate + 3,\n        numberOfMines: (this.state.numberOfWaterPlant += 1),\n        population: (this.state.population += cost)\n      });\n    } else {\n      this.setState({\n        message: \"Not enough Credit. Need \" + \"$\" + (cost - this.state.points)\n      });\n    }\n  };\n\n  buyGasProcessing = () => {\n    let cost = 200\n    if (this.state.points >= 100 + this.state.numberOfGasProcessing * 10) {\n      this.setState({\n        points:\n          this.state.points - (100 + this.state.numberOfGasProcessing * 10),\n        rate: this.state.rate + 3,\n        numberOfMines: (this.state.numberOfGasProcessing += 1)\n      });\n    } else {\n      this.setState({\n        message: \"Not enough Credit. Need \" + \"$\" + (cost - this.state.points)\n      });\n    }\n  };\n\n  buyOreMine = () => {\n    let cost = 100\n    if (this.state.points >= 100 + this.state.numberOfMines * 10) {\n      this.setState({\n        points: this.state.points - (100 + this.state.numberOfMines * 10),\n        rate: this.state.rate + 3,\n        numberOfMines: (this.state.numberOfMines += 1)\n      });\n    } else {\n      this.setState({\n        message: \"Not enough Credit. Need \" + \"$\" + (cost - this.state.points)\n      });\n    }\n  };\n\n  // setInitRate = () => {\n  //   this.setState({\n  //     rate: 1\n  //   });\n  // };\n\n  autoAccumulate = () => {\n    setInterval(() => {\n      this.setState({\n        rate: this.state.rate,\n        points: this.state.points + this.state.rate,\n        populationGrowth: Math.floor(this.state.population * 0.01),\n        population: this.state.population + this.state.populationGrowth\n      });\n    }, 1000);\n  };\n\n  // populationIncrease = () => {\n  //   setInterval(() => {\n  //     this.setState({\n  //       populationGrowth: Math.floor(this.state.population * 0.01)\n  //     });\n  //   }, 1000);\n  // };\n\n  render() {\n    const { points } = this.state;\n    return (\n      <div>\n      <h1>JRJ\\'s Galaxy and Beyond</h1>\n        <button onClick={this.autoAccumulate}>\n          START\n        </button>\n        <button onClick={this.handleClicker}>Click Here</button>\n        <button onClick={this.buyOreMine}>'Buy an Ore Mine($100)'</button>\n        <button onClick={this.buyGasProcessing}>\n          'Buy a Gas Processing Facility($100)'\n        </button>\n        <button onClick={this.buyAgricultureDome}>\n          'Buy an Agriculture Dome($200)'\n        </button>\n        <button onClick={this.buyWaterPlant}>'Buy a Water Processing Plant'</button>\n        <p>{this.state.message}</p>\n        <p>Credit Per Second 💵: {this.state.rate}</p>\n        <p>Population Growth Per Second 🤱: {this.state.populationGrowth}</p>\n        <p>Ore Mines in Operation 🗻: {this.state.numberOfMines}</p>\n        <p>\n          Gas Processing Facilities in Operation 🌋:{\" \"}\n          {this.state.numberOfGasProcessing}\n        </p>\n        <p>\n          Agricultural Domes in Operation 🥬: {this.state.numberOfAgricultureDome}\n        </p>\n        <p>Water Processing Plants in Operation 💧: {this.state.numberOfWaterPlant}</p>\n        <p>Galactic Credit Accumulated 💰: ${points}</p>\n        <p>Total Population 👨‍🚀: {this.state.population}</p>\n      </div>\n    );\n  }\n}\n\nexport default Clicker;\n"]},"metadata":{},"sourceType":"module"}